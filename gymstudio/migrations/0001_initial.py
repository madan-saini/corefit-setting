# Generated by Django 3.2.7 on 2022-03-07 12:54

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Amenity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.Field()),
            ],
            options={
                'db_table': 'amenities',
            },
        ),
        migrations.CreateModel(
            name='Availability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.Field()),
                ('day_name', models.Field()),
                ('start_time', models.Field()),
                ('end_time', models.Field()),
                ('status', models.Field(default=0)),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
            ],
            options={
                'db_table': 'availabilities',
            },
        ),
        migrations.CreateModel(
            name='Bolton',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.Field()),
                ('description', models.Field()),
                ('price', models.Field()),
                ('duration', models.Field()),
                ('slug', models.Field()),
                ('status', models.Field()),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
            ],
            options={
                'db_table': 'boltons',
            },
        ),
        migrations.CreateModel(
            name='BookableAmenity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.Field()),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
            ],
            options={
                'db_table': 'bookable_amenities',
            },
        ),
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.Field()),
                ('brand_id', models.Field(default=0)),
                ('branch_name', models.Field()),
                ('branch_address', models.Field()),
                ('slug', models.Field()),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
            ],
            options={
                'db_table': 'branches',
            },
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.Field()),
                ('brand_name', models.Field()),
                ('brand_address', models.Field()),
                ('slug', models.Field()),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
            ],
            options={
                'db_table': 'brands',
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country_id', models.Field()),
                ('name', models.Field()),
            ],
            options={
                'db_table': 'cities',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.Field()),
            ],
            options={
                'db_table': 'countries',
            },
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.Field()),
                ('is_default', models.Field()),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
            ],
            options={
                'db_table': 'currencies',
            },
        ),
        migrations.CreateModel(
            name='Emailtemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.Field()),
                ('template', models.Field()),
            ],
            options={
                'db_table': 'emailtemplates',
            },
        ),
        migrations.CreateModel(
            name='EmployeeAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.Field()),
                ('schedule_id', models.Field()),
                ('day_name', models.Field()),
                ('start_time', models.Field()),
                ('end_time', models.Field()),
                ('status', models.Field(default=0)),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
            ],
            options={
                'db_table': 'employee_availabilities',
            },
        ),
        migrations.CreateModel(
            name='EmployeeOverAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.Field()),
                ('schedule_id', models.Field()),
                ('date', models.Field()),
                ('start_time', models.Field()),
                ('end_time', models.Field()),
                ('status', models.Field(default=0)),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
            ],
            options={
                'db_table': 'employee_overwrite_availabilities',
            },
        ),
        migrations.CreateModel(
            name='Enquiry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.Field()),
                ('type', models.Field()),
                ('subject', models.Field()),
                ('message', models.Field()),
                ('slug', models.Field()),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
            ],
            options={
                'db_table': 'enquiries',
            },
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.Field()),
            ],
            options={
                'db_table': 'equipments',
            },
        ),
        migrations.CreateModel(
            name='ExistingFaq',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.Field()),
                ('slug', models.Field()),
                ('status', models.Field()),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
            ],
            options={
                'db_table': 'existing_faqs',
            },
        ),
        migrations.CreateModel(
            name='Feature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.Field()),
                ('description', models.Field()),
                ('status', models.Field()),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
            ],
            options={
                'db_table': 'subscription_plan_features',
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'db_table': 'languages',
            },
        ),
        migrations.CreateModel(
            name='OverAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.Field()),
                ('date', models.Field()),
                ('start_time', models.Field()),
                ('end_time', models.Field()),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
            ],
            options={
                'db_table': 'overwrite_availabilities',
            },
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.Field()),
                ('description', models.Field()),
                ('duration', models.Field()),
                ('features', models.Field()),
                ('slug', models.Field()),
                ('status', models.Field()),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
            ],
            options={
                'db_table': 'plans',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.Field()),
            ],
            options={
                'db_table': 'services',
            },
        ),
        migrations.CreateModel(
            name='ServiceAmenity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.Field()),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
            ],
            options={
                'db_table': 'service_amenities',
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.Field()),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
            ],
            options={
                'db_table': 'sessions',
            },
        ),
        migrations.CreateModel(
            name='Sport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.Field()),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
            ],
            options={
                'db_table': 'sports',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_address', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.Field()),
                ('last_name', models.Field()),
                ('contact', models.Field()),
                ('user_type', models.Field()),
                ('uniqueKey', models.Field()),
                ('nationality', models.Field()),
                ('facebookLink', models.Field()),
                ('twitterLink', models.Field()),
                ('instagramLink', models.Field()),
                ('currency', models.Field()),
                ('dob', models.Field(default=None)),
                ('year_of_experince', models.Field()),
                ('languages', models.Field()),
                ('password', models.Field()),
                ('gender', models.Field()),
                ('business_doc', models.Field()),
                ('director_doc', models.Field()),
                ('terms', models.Field(default=0)),
                ('slug', models.Field()),
                ('freelance_id', models.Field(default=0)),
                ('user_id', models.Field(default=0)),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
            ],
            options={
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='UserAward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.Field()),
                ('date', models.Field()),
                ('award_name', models.Field()),
                ('location', models.Field()),
                ('document', models.Field()),
                ('status', models.Field(default=1)),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
            ],
            options={
                'db_table': 'user_awards',
            },
        ),
        migrations.CreateModel(
            name='UserBank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.Field()),
                ('account_name', models.Field()),
                ('bank_name', models.Field()),
                ('routing_number', models.Field()),
                ('account_number', models.Field()),
                ('account_type', models.Field()),
                ('sort_code', models.Field()),
                ('iban_number', models.Field()),
                ('status', models.Field()),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
            ],
            options={
                'db_table': 'user_banks',
            },
        ),
        migrations.CreateModel(
            name='UserCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.Field()),
                ('card_holder_name', models.Field()),
                ('card_number', models.Field()),
                ('card_type', models.Field()),
                ('card_cvv', models.Field()),
                ('expiry_date', models.Field()),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
            ],
            options={
                'db_table': 'user_cards',
            },
        ),
        migrations.CreateModel(
            name='UserClientTransformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.Field()),
                ('name', models.Field()),
                ('description', models.Field()),
                ('image', models.Field()),
                ('beforeimage_front', models.Field()),
                ('beforeimage_back', models.Field()),
                ('beforeimage_side', models.Field()),
                ('afterimage_front', models.Field()),
                ('afterimage_back', models.Field()),
                ('afterimage_side', models.Field()),
                ('slug', models.Field()),
                ('status', models.Field(default=1)),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
            ],
            options={
                'db_table': 'client_transformations',
            },
        ),
        migrations.CreateModel(
            name='UserFaq',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.Field()),
                ('question', models.Field()),
                ('answer', models.Field()),
                ('faq_type', models.Field()),
                ('slug', models.Field()),
                ('status', models.Field()),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
            ],
            options={
                'db_table': 'user_faqs',
            },
        ),
        migrations.CreateModel(
            name='UserMediaRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.Field()),
                ('type', models.Field()),
                ('data', models.Field()),
                ('status', models.Field(default=1)),
                ('mediaTitle', models.Field()),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
            ],
            options={
                'db_table': 'user_media_records',
            },
        ),
        migrations.CreateModel(
            name='UserOffer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.Field()),
                ('promotion_type', models.Field()),
                ('category', models.Field(default=None)),
                ('type_of_service', models.Field()),
                ('expiry_date', models.Field(default=None)),
                ('discount', models.Field(default=0)),
                ('avail_limit', models.Field(default=0)),
                ('before_price', models.Field()),
                ('after_price', models.Field()),
                ('free_service', models.Field()),
                ('currency', models.Field()),
                ('title', models.TextField(default='')),
                ('notes', models.TextField(default='')),
                ('quantity_purchased', models.TextField(default=0)),
                ('quantity_free', models.TextField(default=0)),
                ('status', models.Field()),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
            ],
            options={
                'db_table': 'user_offers',
            },
        ),
        migrations.CreateModel(
            name='UserSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.Field()),
                ('employee_id', models.Field()),
                ('schedule_name', models.Field()),
                ('is_default', models.Field(default=0)),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
            ],
            options={
                'db_table': 'user_schedules',
            },
        ),
        migrations.CreateModel(
            name='UserPrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_category', models.Field()),
                ('type_of_session', models.Field(default=0)),
                ('number_of_people', models.Field(default=0)),
                ('session_type', models.Field()),
                ('session_name', models.Field()),
                ('number_of_session', models.Field(default=0)),
                ('duration', models.Field()),
                ('validity', models.Field(default=0)),
                ('validity_type', models.Field()),
                ('currency', models.Field()),
                ('price', models.Field()),
                ('location', models.Field()),
                ('notes', models.Field(default='')),
                ('what_included', models.Field()),
                ('inclusive_class', models.Field()),
                ('type_of_amenity', models.Field()),
                ('sport_type', models.Field()),
                ('number_of_participant', models.Field()),
                ('booking_length', models.Field()),
                ('slug', models.Field()),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gymstudio.user')),
            ],
            options={
                'db_table': 'user_prices',
            },
        ),
        migrations.CreateModel(
            name='UserEquipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.Field()),
                ('max_value', models.Field()),
                ('visible_status', models.Field()),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
                ('equipment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gymstudio.equipment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gymstudio.user')),
            ],
            options={
                'db_table': 'user_equipments',
            },
        ),
        migrations.CreateModel(
            name='UserBolton',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.Field()),
                ('status', models.Field()),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
                ('bolton', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gymstudio.bolton')),
            ],
            options={
                'db_table': 'user_boltons',
            },
        ),
        migrations.CreateModel(
            name='UserAmenity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.Field()),
                ('visible_status', models.Field()),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
                ('amenity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gymstudio.amenity')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gymstudio.user')),
            ],
            options={
                'db_table': 'user_amenities',
            },
        ),
        migrations.CreateModel(
            name='TrainingLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('training_locations', models.Field()),
                ('slug', models.Field()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gymstudio.user')),
            ],
            options={
                'db_table': 'training_locations',
            },
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('association_id', models.Field(default='')),
                ('type', models.Field(default='')),
                ('status', models.Field()),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
                ('freelancer_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='freelancer_user', to='gymstudio.user')),
                ('gym_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gym_user', to='gymstudio.user')),
            ],
            options={
                'db_table': 'requests',
            },
        ),
        migrations.CreateModel(
            name='PlanPrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.Field()),
                ('price', models.Field()),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gymstudio.plan')),
            ],
            options={
                'db_table': 'planprices',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_booking', models.Field()),
                ('time_of_booking', models.Field()),
                ('location', models.Field()),
                ('client_name', models.Field()),
                ('pt_name', models.Field()),
                ('type_of_services', models.Field()),
                ('service', models.Field()),
                ('slug', models.Field()),
                ('status', models.Field(default=0)),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gymstudio.user')),
            ],
            options={
                'db_table': 'events',
            },
        ),
        migrations.CreateModel(
            name='BasicInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('facility_profile_level', models.Field()),
                ('facility_type', models.Field()),
                ('training_type', models.Field()),
                ('website', models.Field()),
                ('about', models.Field()),
                ('short_bio', models.Field()),
                ('location', models.Field()),
                ('homelocation', models.Field()),
                ('homelocation2', models.Field()),
                ('height', models.Field(default=0)),
                ('height_type_1', models.Field(default=0)),
                ('weight', models.Field(default=0)),
                ('weight_type_1', models.Field(default=0)),
                ('city', models.Field()),
                ('key_skills', models.Field()),
                ('other_skills', models.Field()),
                ('bio_video', models.Field()),
                ('own_facility', models.Field(default=0)),
                ('train_country', models.Field(default=None)),
                ('train_city', models.Field(default=None)),
                ('trainlocation', models.Field(default=None)),
                ('trainBlocation', models.Field(default=None)),
                ('train_country2', models.Field(default=None)),
                ('train_city2', models.Field(default=None)),
                ('trainlocation2', models.Field(default=None)),
                ('trainBlocation2', models.Field(default=None)),
                ('nationality', models.Field(default=None)),
                ('created_at', models.Field()),
                ('updated_at', models.Field()),
                ('branch', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='gymstudio.branch')),
                ('brand', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='gymstudio.brand')),
                ('country', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='gymstudio.country')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gymstudio.user')),
            ],
            options={
                'db_table': 'user_basic_infos',
            },
        ),
    ]
